/*******************************************************************************
 * Copyright 2024 QuiMir
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

#ifndef CMAKE_OPEN_INCLUDES_INCLUDE_OPENGLMESSAGE_H_
#define CMAKE_OPEN_INCLUDES_INCLUDE_OPENGLMESSAGE_H_

#include <iostream>
#include "glad/glad.h"
#include "GLFW/glfw3.h"
#include "Core/MacroDefinition.h"

/**
 * Classes specialized in handling OpenGL messages. Using this class, you can output the 
 * various messages generated by OpenGL at runtime to a log file according to certain 
 * rules. This class is in singleton mode, all function calls must get its instance from 
 * the unified interface GetInstance, and this class can not trigger the copy 
 * construction.
 * 
 * Use case:
 * OpenGLMessage &opengl_message = OpenGLMessage::GetInstance();
 * opengl_message.EnableOpenGLDebugMessage();
 */
class OpenGLMessage {
 public:
  /**
   * OpenGL Debug message is input to the log file, before using it, 
   * you need to activate OpenGL in the main function and call 
   * glfwWindowHint(GLFW_OPENGL_DEBUG_CONTEXT, GLFW_TRUE); otherwise, the linker will 
   * indicate an error. The principle is to enable OpenGL Debug and put a custom function 
   * in glDebugMessageCallback as a special message handling means. The customized
   * function in this function is: OpenGLMessage::OpenGlDebugMessageCallback.
   */
  void EnableOpenGLDebugMessage();

  /**
   * Output OpenGL error information to a log file in the following format: 
   * [Error message]|[name of the file where the error occurred] 
   * ([line number where the error occurred]). The principle is that by 
   * attaching to a function, each time the function is scheduled, 
   * it will first run an additional function and then perform glGetError 
   * detection, and if there is an error, it will output to the log file in the 
   * above format. 
   * 
   * Please see details: auto CheckedCall(const char *file, int line, Func func, 
   * 									  Args... args) -> decltype(func( args...));
   * @tparam Func Additional function types that are derived by the compiler 
   * without manual input.
   * @tparam Args The parameter part of an additional function is a type that 
   * is derived by the compiler without manual input.
   * @param func The name attached to the function. Static functions are 
   * recommended.
   * @param args Parameter of an additional function.
   */
  template <typename Func, typename... Args>
  void GetOpenGLCheckError(Func func, Args... args);

  /**
   * Output OpenGL error information to a log file in the following format: 
   * [Error message]|[name of the file where the error occurred] 
   * ([line number where the error occurred]). The principle is that by 
   * attaching to a function, each time the function is scheduled, 
   * it will first run an additional function and then perform glGetError 
   * detection, and if there is an error, it will output to the log file in the 
   * above format. 
   * 
   * Please see details: auto CheckedCall(const char *file, int line, Func func, 
   * Args... args) -> decltype(func( args...));
   * @tparam Func Additional function types that are derived by the compiler 
   * without manual input.
   * @tparam Args The parameter part of an additional function is a type that 
   * is derived by the compiler without manual input.
   * @param file The name of the file to call the function, which defaults to 
   * __FILE__.
   * @param line The line number on which the function is called, which defaults
   * to __LINE__.
   * @param func The name attached to the function. Static functions are 
   * recommended.
   * @param args Parameter of an additional function.
   */
  template <typename Func, typename... Args>
  void GetOpenGLCheckError(const char* file, int line, Func func, Args... args);

  void GetOpenGLCheckError(const char* file, int line);

  static OpenGLMessage& GetInstance();

  OpenGLMessage& operator=(const OpenGLMessage&) = delete;

 private:
  /**
   * Determines OpenGL runtime errors and outputs them to the log file in the form of 
   * [error type] | [name of the file where the error occurred] 
   * ([line number of the file where the error occurred]), assuming there is an error.
   * @param file The name of the file where the error occurred. 
   * Generally provided by __FILE__.
   * @param line The line number of the file where the error occurred. 
   * Generally provided by __LINE__.
   * @return OpenGL error code.
   */
  GLenum OpenGLCheckError_(const char* file, int line);

  /**
   * Additional OpenGL error detection for the currently typed function. 
   * The principle is that the input function is called first, after which a call to 
   * OpenGLCheckError_ is made, and as more of this function is used, more glGetError 
   * detection is performed.
   * 
   * It is used as follows:
   * OpenGLMessage& opengl_message=OpenGLMessage::GetInstance();
   * opengl_message.CheckedCall(__FILE__,__LINE__,glClear,
   * GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
   * 
   * However, we recommend using GetOpenGLCheckError.
   * @tparam Func The type of the input function, derived by the compiler need not 
   * be explicitly stated.
   * @tparam Args The type of the formal parameter of the input function does not 
   * need to be specifically pointed out, as with Func.
   * @param file The name of the file to call when the call occurs. Generally provided 
   * via __FILE__, which can be customized for input, but is not recommended.
   * @param line The line number at the time of the call. Generally provided via __LINE__.
   * @param func The name of the function.
   * @param args The actual arguments to the function.
   * @return Derived from the called function, returns void if the called function is 
   * of type void.
   */
  template <typename Func, typename... Args>
  auto CheckedCall(const char* file, int line, Func func, Args... args)
      -> decltype(func(args...));

  /**
   * Callback function for OpenGLDebugMessage to handle a series of OpenGL messages. 
   * For parameters, see: 
   * https://registry.khronos.org/OpenGL-Refpages/gl4/html/glDebugMessageCallback.xhtml.
   * @param source The address of an array of variables to receive the sources of the 
   * retrieved messages.
   * @param type The address of an array of variables to receive the types of the 
   * retrieved messages.
   * @param id The address of an array of unsigned integers to receive the ids of the 
   * retrieved messages.
   * @param severity The address of an array of variables to receive the severites of the 
   * retrieved messages.
   * @param length The address of an array of variables to receive the lengths of the 
   * received messages.
   * @param message The address of an array of characters that will receive the messages.
   * @param userParam The userParam will be set to the value passed in the userParam 
   * parameter to the most recent call to
   */
  static void APIENTRY OpenGlDebugMessageCallback(GLenum source, GLenum type,
                                                  GLuint id, GLenum severity,
                                                  GLsizei length,
                                                  const GLchar* message,
                                                  const void* userParam);

  OpenGLMessage() = default;
  OpenGLMessage(const OpenGLMessage&) = default;
};

#include "OpenGLMessage.inl"

#endif  //CMAKE_OPEN_INCLUDES_INCLUDE_OPENGLMESSAGE_H_

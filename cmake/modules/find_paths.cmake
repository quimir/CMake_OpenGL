# file_paths.cmake

set(HEADER_FILES_DIR "${CMAKE_SOURCE_DIR}/includes/include")
set(SOURCE_FILES_DIR "${CMAKE_SOURCE_DIR}/src/implementation")
set(CORE_HEADER_FILES_DIR "${HEADER_FILES_DIR}/Core")
set(CORE_SOURCE_FILES_DIR "${SOURCE_FILES_DIR}/Core")
set(TIME_HEADER_FILES_DIR "${HEADER_FILES_DIR}/Time")
set(TIME_SOURCE_FILES_DIR "${SOURCE_FILES_DIR}/Time")
# Create a master file set
set(MAIN_HEADER_FILES_DIR "${HEADER_FILES_DIR};${TIME_HEADER_FILES_DIR};${CORE_HEADER_FILES_DIR}")
set(MAIN_SOURCE_FILES_DIR "${SOURCE_FILES_DIR};${TIME_SOURCE_FILES_DIR};${CORE_SOURCE_FILES_DIR}")

set(IMGUI_HEADER_FILES_DIR "${HEADER_FILES_DIR}/ImGui")
set(IMGUI_SOURCE_FILES_DIR "${SOURCE_FILES_DIR}/ImGui")
set(IMGUI_FRONTS_HEADER_FILES_DIR "${IMGUI_HEADER_FILES_DIR}/Fonts")
set(IMGUI_FRONTS_SOURCES_FILES_DIR "${SOURCE_FILES_DIR}/ImGui/Fonts")
list(APPEND MAIN_HEADER_FILES_DIR "${IMGUI_HEADER_FILES_DIR}")
list(APPEND MAIN_SOURCE_FILES_DIR "${IMGUI_SOURCE_FILES_DIR}")
list(APPEND MAIN_HEADER_FILES_DIR "${IMGUI_FRONTS_HEADER_FILES_DIR}")
list(APPEND MAIN_SOURCE_FILES_DIR "${IMGUI_FRONTS_SOURCES_FILES_DIR}")

option(ENABLE_EXPERIMENTAL "A quick extension. It could be experimental (unsafe), or it could be a defragment of 
OpenGL code that doesn't fit in the main code area and is therefore placed here. s details will be noted at 
the beginning of each.h with ///." ON)
if (ENABLE_EXPERIMENTAL)
  set(EXPERIMENTAL_HEADER_FILES_DIR "${HEADER_FILES_DIR}/EXPERIMENTAL")
  set(EXPERIMENTAL_SOURCE_FILES_DIR "${SOURCE_FILES_DIR}/EXPERIMENTAL")
  list(APPEND MAIN_HEADER_FILES_DIR "${EXPERIMENTAL_HEADER_FILES_DIR}")
  list(APPEND MAIN_SOURCE_FILES_DIR "${EXPERIMENTAL_SOURCE_FILES_DIR}")
endif ()

# Traverse the master file set.
message(STATUS "Checking directories in MAIN_HEADER_FILES_DIR: ${MAIN_HEADER_FILES_DIR}")
set(MAIN_HEADER_FILES "")

foreach (HEADER_DIR IN LISTS MAIN_HEADER_FILES_DIR)
  file(GLOB_RECURSE HEADER_FILES_TMP
      "${HEADER_DIR}/*.h"
      "${HEADER_DIR}/*.hpp"
      "${HEADER_DIR}/*inl")
  list(APPEND MAIN_HEADER_FILES ${HEADER_FILES_TMP})
endforeach ()

message(STATUS "Checking directories in MAIN_SOURCE_FILES_DIR: ${MAIN_SOURCE_FILES_DIR}")
set(MAIN_SOURCE_FILES "")

foreach (SOURCE_DIR IN LISTS MAIN_SOURCE_FILES_DIR)
  file(GLOB_RECURSE SOURCE_FILES_TMP
      "${SOURCE_DIR}/*.cpp"
      "${SOURCE_DIR}/*.cc")
  list(APPEND MAIN_SOURCE_FILES ${SOURCE_FILES_TMP})
endforeach ()